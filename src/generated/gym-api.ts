/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import * as axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';

export interface WorkoutSessionRequest {
    coachUuid: string;
    hallUuid: string;
    date: string;
    title: string;
    description: string;
}

export interface Exercise {
    uuid?: string;
    name?: string;
    targetMuscles?: TargetMuscle[];
}

export interface Hall {
    uuid?: string;
    hallType?: HallType;
    hallName?: string;
    hallDescription?: string;
}

export interface HallType {
    uuid?: string;
    name?: string;
}

export interface Membership {
    uuid?: string;
    validFrom?: string;
    validUntil?: string;
    membershipType?: MembershipType;
}

export type MembershipTypeCurrency = {
    currencyCode?: string;
    numericCode?: number;
    numericCodeAsString?: string;
    displayName?: string;
    symbol?: string;
    defaultFractionDigits?: number;
};

export interface MembershipType {
    uuid?: string;
    type?: string;
    currency?: MembershipTypeCurrency;
    price?: number;
}

export interface TargetMuscle {
    uuid?: string;
    name?: string;
}

export interface User {
    uuid?: string;
    roles?: UserRole[];
    membership?: Membership;
    firstName: string;
    lastName: string;
    dateOfBirth?: string;
    username?: string;
    email?: string;
    phoneNumber?: string;
    imageUrl?: string;
}

export interface UserRole {
    uuid?: string;
    roleName?: string;
}

export interface WorkoutSessionDto {
    uuid?: string;
    coach?: User;
    hall?: Hall;
    date?: string;
    title?: string;
    description?: string;
    attendants?: User[];
    exercises?: WorkoutSessionExerciseDto[];
}

export interface WorkoutSessionExerciseDto {
    uuid?: string;
    exercise?: Exercise;
    reps?: number;
    weight?: number;
    exerciseOrder?: number;
}

export interface WorkoutSessionExerciseRequest {
    exerciseUuid: string;
    reps: number;
    weight: number;
    exerciseOrder: number;
}

export interface WorkoutSessionAttendantRequest {
    userUuid: string;
}

export interface CreateTargetMuscleRequest {
    /** @minLength 1 */
    name?: string;
}

export interface TargetMuscleDto {
    uuid?: string;
    name?: string;
}

export interface MembershipRequest {
    membershipTypeUuid: string;
}

export interface MembershipDto {
    uuid?: string;
    purchaseDate?: string;
    validUntil?: string;
    membershipType?: MembershipType;
}

export interface MembershipTypeRequest {
    type: string;
    price: number;
    currencyCode: string;
}

export interface MembershipTypeDto {
    uuid?: string;
    type?: string;
    price?: number;
    currency?: string;
}

export interface MaintenanceTaskRequest {
    maintainerUuid: string;
    hallUuid: string;
    plannedStartDate: string;
    plannedEndDate: string;
    description: string;
}

export interface MaintenanceTaskDto {
    uuid?: string;
    maintainer?: User;
    maintenanceHall?: Hall;
    plannedStartDate?: string;
    plannedEndDate?: string;
    description?: string;
}

export interface HallRequest {
    hallTypeUuid: string;
    hallName: string;
    hallDescription: string;
}

export interface HallDto {
    uuid?: string;
    hallType?: HallType;
    hallName?: string;
    hallDescription?: string;
}

export interface CreateExerciseRequest {
    name?: string;
    targetMuscles?: string[];
}

export interface ExerciseDto {
    uuid?: string;
    name?: string;
    targetMuscles?: TargetMuscleDto[];
}

export interface UserRequest {
    roles?: string[];
    cardUuid?: string;
    membershipUuid?: string;
    firstName: string;
    lastName: string;
    dateOfBirth?: string;
    email: string;
    username?: string;
    phoneNumber?: string;
    imageUrl?: string;
}

export interface UserDto {
    uuid?: string;
    roles?: string[];
    membership?: Membership;
    firstName?: string;
    lastName?: string;
    dateOfBirth?: string;
    email?: string;
    username?: string;
    phoneNumber?: string;
    imageUrl?: string;
}

export interface PageWorkoutSessionDto {
    totalElements?: number;
    totalPages?: number;
    pageable?: PageableObject;
    first?: boolean;
    last?: boolean;
    size?: number;
    content?: WorkoutSessionDto[];
    number?: number;
    sort?: SortObject;
    numberOfElements?: number;
    empty?: boolean;
}

export interface PageableObject {
    paged?: boolean;
    pageNumber?: number;
    pageSize?: number;
    offset?: number;
    sort?: SortObject;
    unpaged?: boolean;
}

export interface SortObject {
    sorted?: boolean;
    empty?: boolean;
    unsorted?: boolean;
}

export interface PageUserDto {
    totalElements?: number;
    totalPages?: number;
    pageable?: PageableObject;
    first?: boolean;
    last?: boolean;
    size?: number;
    content?: UserDto[];
    number?: number;
    sort?: SortObject;
    numberOfElements?: number;
    empty?: boolean;
}

export interface ProgressOverviewDto {
    weeklyTotalSets?: ProgressOverviewStatisticDto;
    weeklySessionVolume?: ProgressOverviewStatisticDto;
}

export interface ProgressOverviewStatisticDto {
    value?: number;
    trend?: number;
}

export interface ChartDataDto {
    title?: string;
    timeSeries?: TimeSeriesDto;
}

export interface ChartDto {
    description?: string;
    data?: ChartDataDto[];
}

export interface TimeSeriesDto {
    labels?: string[];
    values?: number[];
}

export interface UserRoleDto {
    uuid?: string;
    role?: string;
}

export interface Pageable {
    /** @minimum 0 */
    page?: number;
    /** @minimum 1 */
    size?: number;
    sort?: string[];
}

export interface PageMembershipDto {
    totalElements?: number;
    totalPages?: number;
    pageable?: PageableObject;
    first?: boolean;
    last?: boolean;
    size?: number;
    content?: MembershipDto[];
    number?: number;
    sort?: SortObject;
    numberOfElements?: number;
    empty?: boolean;
}

export type PaymentDtoCurrency = {
    currencyCode?: string;
    numericCode?: number;
    numericCodeAsString?: string;
    displayName?: string;
    symbol?: string;
    defaultFractionDigits?: number;
};

export type PaymentDtoStatus = (typeof PaymentDtoStatus)[keyof typeof PaymentDtoStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentDtoStatus = {
    PENDING: 'PENDING',
    SUCCEEDED: 'SUCCEEDED',
    EXPIRED: 'EXPIRED',
    FAILED: 'FAILED'
} as const;

export interface PaymentDto {
    paymentId?: string;
    currency?: PaymentDtoCurrency;
    price?: number;
    status?: PaymentDtoStatus;
}

export interface PageMembershipTypeDto {
    totalElements?: number;
    totalPages?: number;
    pageable?: PageableObject;
    first?: boolean;
    last?: boolean;
    size?: number;
    content?: MembershipTypeDto[];
    number?: number;
    sort?: SortObject;
    numberOfElements?: number;
    empty?: boolean;
}

export interface PageMaintenanceTaskDto {
    totalElements?: number;
    totalPages?: number;
    pageable?: PageableObject;
    first?: boolean;
    last?: boolean;
    size?: number;
    content?: MaintenanceTaskDto[];
    number?: number;
    sort?: SortObject;
    numberOfElements?: number;
    empty?: boolean;
}

export interface PageHallDto {
    totalElements?: number;
    totalPages?: number;
    pageable?: PageableObject;
    first?: boolean;
    last?: boolean;
    size?: number;
    content?: HallDto[];
    number?: number;
    sort?: SortObject;
    numberOfElements?: number;
    empty?: boolean;
}

export interface HallTypeDto {
    uuid?: string;
    name?: string;
}

export interface PageExerciseDto {
    totalElements?: number;
    totalPages?: number;
    pageable?: PageableObject;
    first?: boolean;
    last?: boolean;
    size?: number;
    content?: ExerciseDto[];
    number?: number;
    sort?: SortObject;
    numberOfElements?: number;
    empty?: boolean;
}

export type ListWorkoutSessionsParams = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: string[];
};

export type ListMembershipsParams = {
    pageable: Pageable;
};

export type ListMembershipTypesParams = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: string[];
};

export type ListMaintenanceTasksParams = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: string[];
};

export type ListHallsParams = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: string[];
};

export type ListExercisesParams = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: string[];
};

export type ListUsersParams = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: string[];
};

export type GetUserTotalChartDataParams = {
    numberOfWeeks?: number;
};

export type GetUserExerciseChartDataParams = {
    numberOfWeeks?: number;
};

export const listWorkoutSessions = <TData = AxiosResponse<PageWorkoutSessionDto>>(
    params?: ListWorkoutSessionsParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/workout-sessions`, {
        ...options,
        params: { ...params, ...options?.params }
    });
};

export const createWorkoutSession = <TData = AxiosResponse<WorkoutSessionDto>>(
    workoutSessionRequest: WorkoutSessionRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(`/workout-sessions`, workoutSessionRequest, options);
};

export const addWorkoutSessionExercise = <TData = AxiosResponse<WorkoutSessionDto>>(
    id: string,
    workoutSessionExerciseRequest: WorkoutSessionExerciseRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(
        `/workout-sessions/${id}/exercises`,
        workoutSessionExerciseRequest,
        options
    );
};

export const addWorkoutSessionAttendant = <TData = AxiosResponse<WorkoutSessionDto>>(
    id: string,
    workoutSessionAttendantRequest: WorkoutSessionAttendantRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(
        `/workout-sessions/${id}/attendants`,
        workoutSessionAttendantRequest,
        options
    );
};

export const listTargetMuscles = <TData = AxiosResponse<TargetMuscleDto[]>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/target-muscles`, options);
};

export const createTargetMuscle = <TData = AxiosResponse<TargetMuscleDto>>(
    createTargetMuscleRequest: CreateTargetMuscleRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(`/target-muscles`, createTargetMuscleRequest, options);
};

export const handleStripeWebhook = <TData = AxiosResponse<void>>(
    handleStripeWebhookBody: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(`/stripe/webhook`, handleStripeWebhookBody, options);
};

export const listMemberships = <TData = AxiosResponse<PageMembershipDto>>(
    params: ListMembershipsParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/memberships`, {
        ...options,
        params: { ...params, ...options?.params }
    });
};

export const createMembership = <TData = AxiosResponse<MembershipDto>>(
    membershipRequest: MembershipRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(`/memberships`, membershipRequest, options);
};

export const getMembershipPayments = <TData = AxiosResponse<PaymentDto[]>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/memberships/${id}/payments`, options);
};

export const getPaymentURI = <TData = AxiosResponse<string>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(`/memberships/${id}/payments`, undefined, options);
};

export const listMembershipTypes = <TData = AxiosResponse<PageMembershipTypeDto>>(
    params?: ListMembershipTypesParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/membership-types`, {
        ...options,
        params: { ...params, ...options?.params }
    });
};

export const createMembershipType = <TData = AxiosResponse<MembershipTypeDto>>(
    membershipTypeRequest: MembershipTypeRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(`/membership-types`, membershipTypeRequest, options);
};

export const listMaintenanceTasks = <TData = AxiosResponse<PageMaintenanceTaskDto>>(
    params?: ListMaintenanceTasksParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/maintenance-tasks`, {
        ...options,
        params: { ...params, ...options?.params }
    });
};

export const createMaintenanceTask = <TData = AxiosResponse<MaintenanceTaskDto>>(
    maintenanceTaskRequest: MaintenanceTaskRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(`/maintenance-tasks`, maintenanceTaskRequest, options);
};

export const listHalls = <TData = AxiosResponse<PageHallDto>>(
    params?: ListHallsParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/halls`, {
        ...options,
        params: { ...params, ...options?.params }
    });
};

export const createHall = <TData = AxiosResponse<HallDto>>(
    hallRequest: HallRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(`/halls`, hallRequest, options);
};

export const listExercises = <TData = AxiosResponse<PageExerciseDto>>(
    params?: ListExercisesParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/exercises`, {
        ...options,
        params: { ...params, ...options?.params }
    });
};

export const createExercise = <TData = AxiosResponse<ExerciseDto>>(
    createExerciseRequest: CreateExerciseRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.post(`/exercises`, createExerciseRequest, options);
};

export const getWorkoutSession = <TData = AxiosResponse<WorkoutSessionDto>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/workout-sessions/${id}`, options);
};

export const updateCard = <TData = AxiosResponse<WorkoutSessionDto>>(
    id: string,
    workoutSessionRequest: WorkoutSessionRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.patch(`/workout-sessions/${id}`, workoutSessionRequest, options);
};

export const getUser = <TData = AxiosResponse<UserDto>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/users/${id}`, options);
};

export const updateUser = <TData = AxiosResponse<UserDto>>(
    id: string,
    userRequest: UserRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.patch(`/users/${id}`, userRequest, options);
};

export const getMembership = <TData = AxiosResponse<MembershipDto>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/memberships/${id}`, options);
};

export const patchMembership = <TData = AxiosResponse<MembershipDto>>(
    id: string,
    membershipRequest: MembershipRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.patch(`/memberships/${id}`, membershipRequest, options);
};

export const getMembershipType = <TData = AxiosResponse<MembershipTypeDto>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/membership-types/${id}`, options);
};

export const updateCard1 = <TData = AxiosResponse<MembershipTypeDto>>(
    id: string,
    membershipTypeRequest: MembershipTypeRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.patch(`/membership-types/${id}`, membershipTypeRequest, options);
};

export const getMaintenanceTask = <TData = AxiosResponse<MaintenanceTaskDto>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/maintenance-tasks/${id}`, options);
};

export const deleteMaintenanceTask = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.delete(`/maintenance-tasks/${id}`, options);
};

export const updateMaintenanceTask = <TData = AxiosResponse<MaintenanceTaskDto>>(
    id: string,
    maintenanceTaskRequest: MaintenanceTaskRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.patch(`/maintenance-tasks/${id}`, maintenanceTaskRequest, options);
};

export const getHall = <TData = AxiosResponse<HallDto>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/halls/${id}`, options);
};

export const updateHall = <TData = AxiosResponse<HallDto>>(
    id: string,
    hallRequest: HallRequest,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.patch(`/halls/${id}`, hallRequest, options);
};

export const whoAmI = <TData = AxiosResponse<UserDto>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/whoami`, options);
};

export const listUsers = <TData = AxiosResponse<PageUserDto>>(
    params?: ListUsersParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/users`, {
        ...options,
        params: { ...params, ...options?.params }
    });
};

export const listUserWorkoutSessions = <TData = AxiosResponse<WorkoutSessionDto[]>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/users/${id}/workout-sessions`, options);
};

export const getUserProgressOverview = <TData = AxiosResponse<ProgressOverviewDto>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/users/${id}/progress/overview`, options);
};

export const getUserTotalChartData = <TData = AxiosResponse<ChartDto>>(
    id: string,
    params?: GetUserTotalChartDataParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/users/${id}/progress/charts/total-effort`, {
        ...options,
        params: { ...params, ...options?.params }
    });
};

export const getUserExerciseChartData = <TData = AxiosResponse<ChartDto>>(
    id: string,
    params?: GetUserExerciseChartDataParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/users/${id}/progress/charts/exercise-heaviest-weight`, {
        ...options,
        params: { ...params, ...options?.params }
    });
};

export const getUserLastWorkoutSession = <TData = AxiosResponse<WorkoutSessionDto>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/users/${id}/last-workout-session`, options);
};

export const listUserRoles = <TData = AxiosResponse<UserRoleDto[]>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/user-roles`, options);
};

export const listHallTypes = <TData = AxiosResponse<HallTypeDto[]>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.get(`/hall-types`, options);
};

export const deleteWorkoutSessionExercise = <TData = AxiosResponse<void>>(
    id: string,
    exerciseId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.delete(`/workout-sessions/${id}/exercises/${exerciseId}`, options);
};

export const deleteWorkoutSessionAttendant = <TData = AxiosResponse<void>>(
    id: string,
    userId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.delete(`/workout-sessions/${id}/attendants/${userId}`, options);
};

export const deleteTargetMuscle = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.delete(`/target-muscles/${id}`, options);
};

export const deleteExercise = <TData = AxiosResponse<void>>(
    id: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.default.delete(`/exercises/${id}`, options);
};

export type ListWorkoutSessionsResult = AxiosResponse<PageWorkoutSessionDto>;
export type CreateWorkoutSessionResult = AxiosResponse<WorkoutSessionDto>;
export type AddWorkoutSessionExerciseResult = AxiosResponse<WorkoutSessionDto>;
export type AddWorkoutSessionAttendantResult = AxiosResponse<WorkoutSessionDto>;
export type ListTargetMusclesResult = AxiosResponse<TargetMuscleDto[]>;
export type CreateTargetMuscleResult = AxiosResponse<TargetMuscleDto>;
export type HandleStripeWebhookResult = AxiosResponse<void>;
export type ListMembershipsResult = AxiosResponse<PageMembershipDto>;
export type CreateMembershipResult = AxiosResponse<MembershipDto>;
export type GetMembershipPaymentsResult = AxiosResponse<PaymentDto[]>;
export type GetPaymentURIResult = AxiosResponse<string>;
export type ListMembershipTypesResult = AxiosResponse<PageMembershipTypeDto>;
export type CreateMembershipTypeResult = AxiosResponse<MembershipTypeDto>;
export type ListMaintenanceTasksResult = AxiosResponse<PageMaintenanceTaskDto>;
export type CreateMaintenanceTaskResult = AxiosResponse<MaintenanceTaskDto>;
export type ListHallsResult = AxiosResponse<PageHallDto>;
export type CreateHallResult = AxiosResponse<HallDto>;
export type ListExercisesResult = AxiosResponse<PageExerciseDto>;
export type CreateExerciseResult = AxiosResponse<ExerciseDto>;
export type GetWorkoutSessionResult = AxiosResponse<WorkoutSessionDto>;
export type UpdateCardResult = AxiosResponse<WorkoutSessionDto>;
export type GetUserResult = AxiosResponse<UserDto>;
export type UpdateUserResult = AxiosResponse<UserDto>;
export type GetMembershipResult = AxiosResponse<MembershipDto>;
export type PatchMembershipResult = AxiosResponse<MembershipDto>;
export type GetMembershipTypeResult = AxiosResponse<MembershipTypeDto>;
export type UpdateCard1Result = AxiosResponse<MembershipTypeDto>;
export type GetMaintenanceTaskResult = AxiosResponse<MaintenanceTaskDto>;
export type DeleteMaintenanceTaskResult = AxiosResponse<void>;
export type UpdateMaintenanceTaskResult = AxiosResponse<MaintenanceTaskDto>;
export type GetHallResult = AxiosResponse<HallDto>;
export type UpdateHallResult = AxiosResponse<HallDto>;
export type WhoAmIResult = AxiosResponse<UserDto>;
export type ListUsersResult = AxiosResponse<PageUserDto>;
export type ListUserWorkoutSessionsResult = AxiosResponse<WorkoutSessionDto[]>;
export type GetUserProgressOverviewResult = AxiosResponse<ProgressOverviewDto>;
export type GetUserTotalChartDataResult = AxiosResponse<ChartDto>;
export type GetUserExerciseChartDataResult = AxiosResponse<ChartDto>;
export type GetUserLastWorkoutSessionResult = AxiosResponse<WorkoutSessionDto>;
export type ListUserRolesResult = AxiosResponse<UserRoleDto[]>;
export type ListHallTypesResult = AxiosResponse<HallTypeDto[]>;
export type DeleteWorkoutSessionExerciseResult = AxiosResponse<void>;
export type DeleteWorkoutSessionAttendantResult = AxiosResponse<void>;
export type DeleteTargetMuscleResult = AxiosResponse<void>;
export type DeleteExerciseResult = AxiosResponse<void>;
